// Code Generated by Sidekick is for learning and experimentation purposes only.
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CollaboratorService } from '../../services/collaborator/collaborator.service';
import { EmployeeService } from '../../services/employee/employee.service';
import { BackButtonComponent } from '../shared/backbutton/backbutton.component';


@Component({
  selector: 'app-manage-collaborator',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, FormsModule, BackButtonComponent],
  templateUrl: './manage-collaborator.component.html'
})
export class ManageCollaboratorComponent implements OnInit {
  // Collaborator data
  collaborators: any[] = [];
  collaboratorForm: FormGroup;
  loadingCollaborators = false;
  errorCollaborators = '';
  returnToDashboard = () => {
    window.history.back();
  };
  success = '';
  showConfirmModal = false;
  pendingDeleteEmail = '';

  // Employee data & filters
  employees: any[] = [];
  filteredEmployees: any[] = [];
  totalEmployees = 0;
  bands: string[] = [];
  roles: string[] = [];
  skillLevels: string[] = [];
  selectedBand = '';
  selectedRole = '';
  selectedSkillLevel = '';
  search = '';
  searchQuery = '';
  loadingEmployees = false;
  errorEmployees = '';

  // For selecting an employee to add as collaborator
  selectedEmployee: any = null;
  selectedEmployeeEmail = '';

  constructor(
    private collaboratorService: CollaboratorService,
    private employeeService: EmployeeService,
    private fb: FormBuilder
  ) {
    this.collaboratorForm = this.fb.group({
      collaborator_email: ['', [Validators.required, Validators.email]],
      topics: [false],
      test_create: [false],
      test_assign: [false]
    });
  }

  ngOnInit() {
    this.loadCollaborators();
    this.loadEmployeeFilters();
    this.loadEmployees();
  }

  // --- Collaborator Logic ---
  loadCollaborators() {
    this.loadingCollaborators = true;
    this.errorCollaborators = '';
    this.collaboratorService.getCollaborators().subscribe({
      next: (data) => {
        this.collaborators = data || [];
        this.loadingCollaborators = false;
      },
      error: (err: any) => {
        // Graceful error handling
        this.errorCollaborators = err?.error?.detail || 'Unable to load collaborators. Please try again later.';
        this.loadingCollaborators = false;
      }
    });
  }

  submitForm() {
    if (this.collaboratorForm.invalid) return;
    this.success = '';
    this.errorCollaborators = '';
    this.collaboratorService.upsertCollaborator(this.collaboratorForm.value).subscribe({
      next: () => {
        this.success = 'Collaborator added/updated successfully';
        this.loadCollaborators();
        this.collaboratorForm.reset({ topics: false, test_create: false, test_assign: false });
        setTimeout(() => this.success = '', 2500);
      },
      error: (err: any) => {
        this.errorCollaborators = err?.error?.detail || 'Failed to add/update collaborator. Please check the email and permissions.';
        setTimeout(() => this.errorCollaborators = '', 3000);
      }
    });
  }

  confirmDelete(email: string) {
    this.pendingDeleteEmail = email;
    this.showConfirmModal = true;
  }

  deleteCollaborator() {
    this.showConfirmModal = false;
    this.collaboratorService.deleteCollaborator(this.pendingDeleteEmail).subscribe({
      next: () => {
        this.success = 'Collaborator deleted successfully';
        this.loadCollaborators();
        setTimeout(() => this.success = '', 2500);
      },
      error: (err: any) => {
        this.errorCollaborators = err?.error?.detail || 'Failed to delete collaborator.';
        setTimeout(() => this.errorCollaborators = '', 3000);
      }
    });
  }

  cancelDelete() {
    this.showConfirmModal = false;
    this.pendingDeleteEmail = '';
  }

  // --- Employee Logic ---
  loadEmployeeFilters() {
    this.employeeService.getEmployeeFilterOptions().subscribe({
      next: (data: any) => {
        this.bands = data.bands || [];
        this.roles = data.roles || [];
        this.skillLevels = data.skill_levels || data.skills || [];
      },
      error: (error: any) => {
        this.errorEmployees = 'Failed to load filter options. Please try again later.';
      }
    });
  }

  loadEmployees() {
    this.loadingEmployees = true;
    this.errorEmployees = '';
    const params: any = {};
    if (this.selectedBand) params.band = this.selectedBand;
    if (this.selectedRole) params.designation = this.selectedRole;
    if (this.selectedSkillLevel) params.skill_level = this.selectedSkillLevel;
    if (this.search) params.search = this.search;

    this.employeeService.getEmployees(params).subscribe({
      next: (data: any) => {
        this.employees = data.employees || [];
        this.totalEmployees = data.total || 0;
        this.loadingEmployees = false;
      },
      error: (error: any) => {
        this.errorEmployees = 'Failed to load employees. Please try again later.';
        this.loadingEmployees = false;
      }
    });
  }

  onEmployeeFilterChange() {
    this.loadEmployees();
    // Update search results if there's an active search query
    if (this.searchQuery.trim()) {
      this.onSearchChange();
    }
  }

  // New search-based employee selection methods
  onSearchChange() {
    if (this.searchQuery.trim()) {
      // Filter employees based on search query and current filters
      this.filteredEmployees = this.employees.filter(emp => {
        const searchLower = this.searchQuery.toLowerCase();
        const nameMatch = emp.name?.toLowerCase().includes(searchLower);
        const emailMatch = emp.email?.toLowerCase().includes(searchLower);
        return nameMatch || emailMatch;
      }).slice(0, 10); // Limit to 10 results for performance
    } else {
      this.filteredEmployees = [];
    }
  }

  selectEmployeeFromSearch(employee: any) {
    this.selectedEmployee = employee;
    this.selectedEmployeeEmail = employee.email;
    this.collaboratorForm.patchValue({ collaborator_email: employee.email });
    this.searchQuery = '';
    this.filteredEmployees = [];
  }

  selectEmployee(email: string) {
    const employee = this.employees.find(emp => emp.email === email);
    if (employee) {
      this.selectEmployeeFromSearch(employee);
    }
  }

  clearEmployeeSelection() {
    this.selectedEmployee = null;
    this.selectedEmployeeEmail = '';
    this.searchQuery = '';
    this.filteredEmployees = [];
    this.collaboratorForm.patchValue({ collaborator_email: '' });
  }

  clearAllFilters() {
    this.selectedBand = '';
    this.selectedRole = '';
    this.selectedSkillLevel = '';
    this.search = '';
    this.searchQuery = '';
    this.filteredEmployees = [];
    this.onEmployeeFilterChange();
  }

  hasActiveFilters(): boolean {
    return !!(this.selectedBand || this.selectedRole || this.selectedSkillLevel || this.search || this.searchQuery);
  }
}
