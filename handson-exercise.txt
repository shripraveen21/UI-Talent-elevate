<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hands-On Project Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb; /* gray-50 */
        }
        /* Style for code-like text blocks */
        pre, textarea {
            background-color: #f3f4f6; /* gray-100 */
            padding: 1rem;
            border-radius: 0.5rem;
            font-family: 'Courier New', Courier, monospace;
            font-size: 0.875rem;
            line-height: 1.6;
            color: #1f2937; /* gray-800 */
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        textarea {
            border: 1px solid #d1d5db;
        }
    </style>
</head>
<body class="text-gray-800">

    <main class="container mx-auto max-w-5xl px-4 sm:px-6 lg:px-8 py-10">
        <!-- Static Header -->
        <div>
            <h1 class="text-3xl font-bold text-gray-900">Hands-On Project Generator</h1>
            <p class="mt-2 text-gray-600">Welcome back, nirmal! Here's what's happening today.</p>
        </div>
        <div class="mt-8 flex items-center space-x-4">
            <div class="flex-shrink-0 bg-blue-100 p-3 rounded-lg">
                <svg class="h-8 w-8 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
            </div>
            <div>
                <h2 class="text-xl font-semibold text-gray-900">Hands-On Project Generator</h2>
                <p class="mt-1 text-sm text-gray-500">Create practical coding projects for technical assessments</p>
            </div>
        </div>

        <!-- Dynamic Content Area -->
        <div id="app-content" class="mt-8">

            <!-- STATE 1: CONFIGURATION SCREEN -->
            <div id="config-screen">
                <div class="bg-white p-8 rounded-lg border border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-800 mb-1">Project Setup</h3>
                    <p class="text-sm text-gray-500 mb-6">Configure the parameters for your hands-on project</p>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="tech-stack" class="block text-sm font-medium text-gray-700">Tech Stack</label>
                            <select id="tech-stack" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                                <option value="">Select Tech Stack</option>
                                <option>React</option>
                                <option>Angular</option>
                                <option>Node.js</option>
                                <option>Python with Flask</option>
                                <option>Java with Spring</option>
                            </select>
                        </div>
                        <div>
                            <label for="duration" class="block text-sm font-medium text-gray-700">Duration (hours)</label>
                            <input type="number" id="duration" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="e.g., 4">
                        </div>
                        <div class="md:col-span-2">
                             <label for="concepts" class="block text-sm font-medium text-gray-700">Concepts</label>
                             <div class="mt-1 flex rounded-md shadow-sm">
                                <input type="text" id="concepts" class="flex-1 block w-full min-w-0 rounded-none rounded-l-md px-3 py-2 bg-white border border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Enter concepts (comma-separated)">
                                <button id="suggest-concepts-btn" type="button" class="inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-300 bg-gray-50 text-gray-500 text-sm hover:bg-gray-100">
                                    ✨ Suggest
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="mt-8">
                        <button id="generate-btn" class="w-full flex items-center justify-center space-x-2 px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                           <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.898 20.572L16.5 21.75l-.398-1.178a3.375 3.375 0 00-2.455-2.456L12.5 18l1.178-.398a3.375 3.375 0 002.455-2.456L16.5 14.25l.398 1.178a3.375 3.375 0 002.455 2.456L20.5 18l-1.178.398a3.375 3.375 0 00-2.455 2.456z" />
                            </svg>
                            <span>Generate Hands-On Project</span>
                        </button>
                    </div>
                </div>
            </div>

            <!-- STATE 2: REVIEW SCREEN -->
            <div id="review-screen" class="hidden space-y-8">
                 <div class="bg-white p-8 rounded-lg border border-gray-200">
                    <div class="flex items-center space-x-3 mb-4">
                         <svg class="h-6 w-6 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
                        </svg>
                        <h3 class="text-lg font-semibold text-gray-800">Software Requirements Specification</h3>
                    </div>
                    <p class="text-sm text-gray-500 mb-6">Generated SRS content - Please review and edit as needed.</p>
                    <pre id="srs-preview"></pre>
                </div>

                 <div class="bg-white p-8 rounded-lg border border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-800 mb-6">Review and Edit SRS</h3>
                    <textarea id="srs-editor" class="w-full h-64 p-4 border border-gray-300 rounded-md font-mono text-sm"></textarea>
                    <div class="mt-6 bg-gray-50 p-4 rounded-lg border border-gray-200">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <button id="approve-btn" class="w-full px-6 py-3 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 flex items-center justify-center space-x-2">
                               <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Approve SRS</span>
                            </button>
                             <button id="regenerate-btn" class="w-full px-6 py-3 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 flex items-center justify-center space-x-2">
                                 <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.664 0l3.18-3.185m-3.18-5.835v4.992m0 0h-4.992m4.992 0l-3.181-3.183a8.25 8.25 0 00-11.664 0l-3.18 3.185" />
                                </svg>
                                <span>✨ Regenerate SRS</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- STATE 3: FINAL SCREEN -->
            <div id="final-screen" class="hidden space-y-8">
                <div class="bg-green-50 border-l-4 border-green-400 text-green-700 p-4 rounded-md">
                    <div class="flex">
                        <div class="flex-shrink-0">
                           <svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium">Project Saved Successfully!</p>
                            <p class="text-sm">Your hands-on project is ready to use.</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white p-6 rounded-lg border border-gray-200">
                    <div class="flex items-center space-x-3 mb-4">
                        <svg class="h-6 w-6 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                           <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
                        </svg>
                        <h3 class="text-lg font-semibold text-gray-800">Final SRS</h3>
                    </div>
                    <pre id="final-srs"></pre>
                </div>
                <div class="pt-6 flex items-center justify-between">
                    <button id="back-btn" class="px-4 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 flex items-center space-x-2">
                        <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                           <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
                        </svg>
                        <span>Back to Dashboard</span>
                    </button>
                    <button id="save-btn" class="px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 flex items-center space-x-2">
                        <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                           <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" />
                        </svg>
                        <span>Save Hands-On Project</span>
                    </button>
                </div>
            </div>

            <!-- LOADING INDICATOR -->
            <div id="loading-indicator" class="hidden text-center py-10">
                 <div class="inline-flex items-center px-4 py-2 font-semibold leading-6 text-sm shadow rounded-md text-blue-600 bg-blue-100">
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span id="loading-text">Generating, please wait...</span>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const screens = {
                config: document.getElementById('config-screen'),
                review: document.getElementById('review-screen'),
                final: document.getElementById('final-screen'),
                loading: document.getElementById('loading-indicator')
            };

            const inputs = {
                techStack: document.getElementById('tech-stack'),
                duration: document.getElementById('duration'),
                concepts: document.getElementById('concepts'),
                srsEditor: document.getElementById('srs-editor')
            };

            const displays = {
                srsPreview: document.getElementById('srs-preview'),
                finalSrs: document.getElementById('final-srs'),
                loadingText: document.getElementById('loading-text')
            };

            const buttons = {
                generate: document.getElementById('generate-btn'),
                suggestConcepts: document.getElementById('suggest-concepts-btn'),
                approve: document.getElementById('approve-btn'),
                regenerate: document.getElementById('regenerate-btn'),
                back: document.getElementById('back-btn'),
                save: document.getElementById('save-btn')
            };

            let currentState = 'config';

            // --- Gemini API Configuration ---
            const apiKey = ""; // This will be handled by the execution environment
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            const callGeminiAPI = async (prompt, systemInstruction) => {
                const payload = {
                    contents: [{ parts: [{ text: prompt }] }],
                    systemInstruction: { parts: [{ text: systemInstruction }] }
                };

                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        throw new Error(`API call failed with status: ${response.status}`);
                    }

                    const result = await response.json();
                    return result.candidates?.[0]?.content?.parts?.[0]?.text || "No content generated.";
                } catch (error) {
                    console.error("Error calling Gemini API:", error);
                    alert("An error occurred while communicating with the AI. Please try again.");
                    return null;
                }
            };
            
            // --- UI State Management ---
            const render = () => {
                Object.values(screens).forEach(screen => screen.classList.add('hidden'));
                if (screens[currentState]) {
                    screens[currentState].classList.remove('hidden');
                }
            };

            const setState = (newState) => {
                currentState = newState;
                render();
            };

            // --- Event Listeners and Logic ---
            buttons.suggestConcepts.addEventListener('click', async () => {
                const techStack = inputs.techStack.value;
                if (!techStack) {
                    alert("Please select a Tech Stack first.");
                    return;
                }
                
                const originalButtonText = buttons.suggestConcepts.innerHTML;
                buttons.suggestConcepts.innerHTML = `<svg class="animate-spin h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>`;
                buttons.suggestConcepts.disabled = true;

                const prompt = `Suggest a list of 5-7 important, comma-separated concepts for a hands-on project using the following tech stack: ${techStack}. Provide only the comma-separated list, nothing else.`;
                const systemInstruction = "You are an expert curriculum designer for software engineers.";
                const concepts = await callGeminiAPI(prompt, systemInstruction);

                if (concepts) {
                    inputs.concepts.value = concepts;
                }
                buttons.suggestConcepts.innerHTML = originalButtonText;
                buttons.suggestConcepts.disabled = false;
            });

            buttons.generate.addEventListener('click', async () => {
                const techStack = inputs.techStack.value;
                const duration = inputs.duration.value;
                const concepts = inputs.concepts.value;

                if (!techStack || !duration || !concepts) {
                    alert("Please fill out all fields before generating.");
                    return;
                }
                
                displays.loadingText.textContent = "Generating SRS...";
                setState('loading');
                
                const prompt = `Create a detailed Software Requirements Specification (SRS) for a hands-on coding project.
                - Tech Stack: ${techStack}
                - Duration: ${duration} hours
                - Core Concepts to test: ${concepts}
                Format the output in Markdown. Include sections like Project Overview, Functional Requirements, Technical Requirements, and Success Metrics.`;
                const systemInstruction = "You are a senior software engineer designing a technical assessment for hiring. The SRS should be clear, concise, and professional.";
                
                const srs = await callGeminiAPI(prompt, systemInstruction);
                if (srs) {
                    displays.srsPreview.textContent = srs;
                    inputs.srsEditor.value = srs;
                    setState('review');
                } else {
                    setState('config'); // Go back if API fails
                }
            });

            buttons.regenerate.addEventListener('click', async () => {
                const editedSrs = inputs.srsEditor.value;
                 if (!editedSrs) {
                    alert("The SRS is empty. Cannot regenerate.");
                    return;
                }

                displays.loadingText.textContent = "Regenerating based on your feedback...";
                setState('loading');

                const prompt = `Based on the following (potentially edited) Software Requirements Specification, please regenerate an improved version. Incorporate any implicit or explicit feedback from the user's changes. Here is the SRS:\n\n${editedSrs}`;
                const systemInstruction = "You are a senior software engineer refining a technical assessment. Your goal is to improve the SRS based on the provided version.";
                
                const newSrs = await callGeminiAPI(prompt, systemInstruction);
                 if (newSrs) {
                    displays.srsPreview.textContent = newSrs;
                    inputs.srsEditor.value = newSrs;
                    setState('review');
                } else {
                    setState('review'); // Go back to review if API fails
                }
            });

            buttons.approve.addEventListener('click', () => {
                const finalSrs = inputs.srsEditor.value;
                if (!finalSrs) {
                    alert("The SRS is empty. Cannot approve.");
                    return;
                }
                displays.loadingText.textContent = "Finalizing...";
                setState('loading');
                setTimeout(() => { // Simulate a short finalization step
                    displays.finalSrs.textContent = finalSrs;
                    setState('final');
                }, 500);
            });
            
            buttons.back.addEventListener('click', () => {
                setState('config');
            });

            // Initial render
            render();
        });
    </script>

</body>
</html>

