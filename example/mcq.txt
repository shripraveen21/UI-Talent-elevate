<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCQ Assessment - React & JavaScript Fundamentals</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
        }
        /* Custom styles for radio buttons to change border on check */
        .option-container input:checked + label {
            border-color: #3b82f6; /* blue-500 */
            background-color: #eff6ff; /* blue-50 */
        }
         .option-container input:checked + label svg {
            stroke: #3b82f6; /* blue-500 */
        }
    </style>
</head>
<body>

    <!-- Header Navigation -->
    <header class="bg-white border-b border-gray-200 sticky top-0 z-20">
        <nav class="container mx-auto px-6 py-4">
            <div class="flex justify-between items-center">
                <div class="flex items-center space-x-4">
                    <a href="#" class="text-2xl font-bold text-indigo-600">Talent Elevate</a>
                    <span class="bg-indigo-600 text-white text-xs font-bold px-3 py-1 rounded-full">Capability Leader</span>
                </div>
                <div class="flex items-center space-x-5 text-gray-600">
                    <a href="#" class="flex items-center space-x-2 hover:text-indigo-600"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" /></svg><span class="text-sm font-medium">nirmal</span></a>
                    <a href="#" class="hover:text-indigo-600"><svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6 6 0 00-5-5.917V5a1 1 0 00-2 0v.083A6 6 0 006 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" /></svg></a>
                    <a href="#" class="hover:text-indigo-600"><svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.096 2.572-1.065z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg></a>
                    <div class="border-l border-gray-300 h-6"></div>
                    <a href="#" class="flex items-center space-x-2 hover:text-indigo-600"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" /></svg><span class="text-sm font-medium">Sign Out</span></a>
                </div>
            </div>
        </nav>
    </header>

    <!-- Main Content -->
    <main class="container mx-auto px-6 py-8">
        <!-- Page Title -->
        <h1 class="text-3xl font-bold text-gray-800">MCQ Assessment - React & JavaScript Fundamentals</h1>
        <p class="mt-2 text-gray-600">Welcome back, nirmal! Here's what's happening today.</p>

        <!-- Assessment Progress Section -->
        <div class="mt-8 bg-white p-6 rounded-lg border border-gray-200">
            <div class="flex justify-between items-center">
                <div>
                    <h2 class="text-lg font-bold text-gray-800">React & JavaScript Fundamentals</h2>
                    <p class="text-sm text-gray-500">Multiple Choice Questions Assessment</p>
                </div>
                <div class="flex items-center space-x-2 text-sm font-medium text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" /></svg>
                    <span>29:41</span>
                </div>
            </div>
            <div class="mt-4">
                <div class="w-full bg-gray-200 rounded-full h-2.5">
                    <div class="bg-blue-600 h-2.5 rounded-full" style="width: 20%"></div>
                </div>
                <p class="text-sm text-gray-600 mt-2">Question 1 of 5</p>
            </div>
        </div>

        <!-- Vertically Stacked Questions -->
        <div class="mt-6 space-y-8">
            
            <!-- Question 1 -->
            <div class="bg-white p-8 rounded-lg border border-gray-200 relative">
                <div class="absolute top-4 right-4">
                    <button class="regenerate-btn group w-8 h-8 flex items-center justify-center bg-gray-100 rounded-full hover:bg-gray-200 transition-colors" data-target="Question 1">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h5M20 20v-5h-5M4 20h5v-5M20 4h-5v5" /></svg>
                        <span class="absolute -top-8 right-0 w-max bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Regenerate</span>
                    </button>
                </div>
                <h3 class="text-lg font-semibold text-gray-800">What is the main purpose of React's useState hook?</h3>
                <div class="mt-6 space-y-4">
                    <div class="option-container"><input type="radio" name="question1" id="q1a" class="hidden"><label for="q1a" class="flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer transition-all hover:border-blue-400"><span class="w-5 h-5 border-2 border-gray-300 rounded-full mr-4 flex-shrink-0"></span><span class="text-gray-700">To manage component lifecycle</span></label></div>
                    <div class="option-container"><input type="radio" name="question1" id="q1b" class="hidden"><label for="q1b" class="flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer transition-all hover:border-blue-400"><span class="w-5 h-5 border-2 border-gray-300 rounded-full mr-4 flex-shrink-0"></span><span class="text-gray-700">To manage component state</span></label></div>
                    <div class="option-container"><input type="radio" name="question1" id="q1c" class="hidden"><label for="q1c" class="flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer transition-all hover:border-blue-400"><span class="w-5 h-5 border-2 border-gray-300 rounded-full mr-4 flex-shrink-0"></span><span class="text-gray-700">To handle side effects</span></label></div>
                    <div class="option-container"><input type="radio" name="question1" id="q1d" class="hidden"><label for="q1d" class="flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer transition-all hover:border-blue-400"><span class="w-5 h-5 border-2 border-gray-300 rounded-full mr-4 flex-shrink-0"></span><span class="text-gray-700">To optimize performance</span></label></div>
                </div>
            </div>

            <!-- Question 2 -->
            <div class="bg-white p-8 rounded-lg border border-gray-200 relative">
                <div class="absolute top-4 right-4">
                     <button class="regenerate-btn group w-8 h-8 flex items-center justify-center bg-gray-100 rounded-full hover:bg-gray-200 transition-colors" data-target="Question 2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h5M20 20v-5h-5M4 20h5v-5M20 4h-5v5" /></svg>
                        <span class="absolute -top-8 right-0 w-max bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">Regenerate</span>
                    </button>
                </div>
                <h3 class="text-lg font-semibold text-gray-800">Which of the following is NOT a core concept of Redux?</h3>
                <div class="mt-6 space-y-4">
                    <div class="option-container"><input type="radio" name="question2" id="q2a" class="hidden"><label for="q2a" class="flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer transition-all hover:border-blue-400"><span class="w-5 h-5 border-2 border-gray-300 rounded-full mr-4 flex-shrink-0"></span><span class="text-gray-700">Store</span></label></div>
                    <div class="option-container"><input type="radio" name="question2" id="q2b" class="hidden"><label for="q2b" class="flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer transition-all hover:border-blue-400"><span class="w-5 h-5 border-2 border-gray-300 rounded-full mr-4 flex-shrink-0"></span><span class="text-gray-700">Actions</span></label></div>
                    <div class="option-container"><input type="radio" name="question2" id="q2c" class="hidden"><label for="q2c" class="flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer transition-all hover:border-blue-400"><span class="w-5 h-5 border-2 border-gray-300 rounded-full mr-4 flex-shrink-0"></span><span class="text-gray-700">Components</span></label></div>
                    <div class="option-container"><input type="radio" name="question2" id="q2d" class="hidden"><label for="q2d" class="flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer transition-all hover:border-blue-400"><span class="w-5 h-5 border-2 border-gray-300 rounded-full mr-4 flex-shrink-0"></span><span class="text-gray-700">Reducers</span></label></div>
                </div>
            </div>
            
        </div>
        
        <!-- Final Submission Section -->
        <div class="mt-10 pt-6 border-t border-gray-200">
            <div class="flex items-center justify-end space-x-4">
                 <button class="regenerate-btn bg-gray-200 text-gray-800 font-bold py-3 px-8 rounded-lg hover:bg-gray-300 transition-colors text-lg" data-target="Entire Assessment">
                    Regenerate Assessment
                </button>
                 <button class="bg-blue-600 text-white font-bold py-3 px-10 rounded-lg hover:bg-blue-700 transition-colors text-lg">
                    Approve Assessment
                </button>
            </div>
        </div>

    </main>

    <!-- Regenerate Modal -->
    <div id="regenerateModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-30 hidden">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
            <h3 id="modalTitle" class="text-xl font-bold text-gray-800">Regenerate Question</h3>
            <p class="mt-2 text-sm text-gray-600">You can provide feedback below to guide the regeneration process, or leave it empty for a completely new question.</p>
            <div class="mt-4">
                <textarea id="regenerateComment" class="w-full h-28 p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Optional: e.g., 'Make this question harder' or 'Focus more on async hooks...'"></textarea>
            </div>
            <div class="mt-6 flex justify-end space-x-3">
                <button id="cancelModalBtn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Cancel</button>
                <button id="confirmRegenerateBtn" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Regenerate</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const regenerateModal = document.getElementById('regenerateModal');
            const modalTitle = document.getElementById('modalTitle');
            const openModalButtons = document.querySelectorAll('.regenerate-btn');
            const cancelModalBtn = document.getElementById('cancelModalBtn');
            const confirmRegenerateBtn = document.getElementById('confirmRegenerateBtn');

            let currentRegenerateTarget = null;

            const openModal = (target) => {
                currentRegenerateTarget = target;
                modalTitle.textContent = `Regenerate ${target}`;
                regenerateModal.classList.remove('hidden');
            };

            const closeModal = () => {
                regenerateModal.classList.add('hidden');
                document.getElementById('regenerateComment').value = ''; // Clear comment box
                currentRegenerateTarget = null;
            };

            openModalButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const target = button.dataset.target;
                    openModal(target);
                });
            });

            cancelModalBtn.addEventListener('click', closeModal);

            // Also close modal if clicking outside the content area
            regenerateModal.addEventListener('click', (event) => {
                if (event.target === regenerateModal) {
                    closeModal();
                }
            });

            confirmRegenerateBtn.addEventListener('click', () => {
                const comment = document.getElementById('regenerateComment').value;
                console.log(`Regenerating: ${currentRegenerateTarget}`);
                console.log(`With comment: ${comment || 'No comment provided'}`);
                // Here you would add the logic to call your backend/API for regeneration
                
                alert(`Regeneration request for "${currentRegenerateTarget}" has been submitted!`);
                closeModal();
            });
        });
    </script>

</body>
</html>

