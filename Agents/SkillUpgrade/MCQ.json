[
  {
    "question1": {
      "question": "Which method in Python reads all lines from a text file and returns them as a list of strings?",
      "options": {
        "A": "read()",
        "B": "readlines()",
        "C": "readline()",
        "D": "splitlines()"
      },
      "correctAnswer": "B",
      "explanation": {
        "A": "read() reads the full file contents as a single string, not a list.",
        "B": "readlines() reads all lines and returns a list where each element is a line from the file.",
        "C": "readline() reads only one line at a time from the file.",
        "D": "splitlines() operates on a string, not directly on a file object."
      },
      "topics": [
        "File Handling"
      ],
      "concepts": [
        "readlines",
        "File Object Methods"
      ]
    },
    "question2": {
      "question": "What does 'os.path.exists(path)' evaluate to in Python?",
      "options": {
        "A": "True if the path refers to an existing file or directory",
        "B": "Returns the absolute path for the given input",
        "C": "Checks permissions of the path",
        "D": "Returns size of the file at that path"
      },
      "correctAnswer": "A",
      "explanation": {
        "A": "os.path.exists(path) returns True if the file or folder exists, False otherwise.",
        "B": "os.path.abspath(path) is used for absolute paths.",
        "C": "Checking permissions requires os.access(), not exists().",
        "D": "os.path.getsize(path) is used to retrieve file size."
      },
      "topics": [
        "os"
      ],
      "concepts": [
        "os.path",
        "exists"
      ]
    },
    "question3": {
      "question": "Which loop construct is typically preferred in Python when the number of iterations is known beforehand?",
      "options": {
        "A": "while loop",
        "B": "for loop",
        "C": "for...else loop",
        "D": "repeat loop"
      },
      "correctAnswer": "B",
      "explanation": {
        "A": "while loops are better when the condition depends on runtime values, not a fixed count.",
        "B": "for loop is used for iterating a known number of times, especially over sequences.",
        "C": "for...else is not a distinct loop type, but an extension of for loops.",
        "D": "Python does not have a repeat loop construct."
      },
      "topics": [
        "Loops",
        "Control Statements"
      ],
      "concepts": [
        "for loop",
        "iteration"
      ]
    },
    "question4": {
      "question": "Which statement in Python skips the current iteration of a loop and continues with the next?",
      "options": {
        "A": "break",
        "B": "continue",
        "C": "pass",
        "D": "exit"
      },
      "correctAnswer": "B",
      "explanation": {
        "A": "break exits the entire loop immediately.",
        "B": "continue skips the rest of the loop body for current iteration and jumps to the next.",
        "C": "pass does nothing and simply moves to the next statement.",
        "D": "exit is not related to loop control, but can terminate the program."
      },
      "topics": [
        "Control Statements",
        "Loops"
      ],
      "concepts": [
        "continue",
        "Loop Control"
      ]
    },
    "question5": {
      "question": "Which keyword is used to define a class in Python?",
      "options": {
        "A": "define",
        "B": "type",
        "C": "class",
        "D": "object"
      },
      "correctAnswer": "C",
      "explanation": {
        "A": "'define' is not a Python keyword for classes.",
        "B": "'type' is used for type objects, not definitions.",
        "C": "'class' is the correct keyword to define a class.",
        "D": "'object' is a built-in class but not a keyword for defining a class."
      },
      "topics": [
        "OOPs"
      ],
      "concepts": [
        "class definition"
      ]
    },
    "question6": {
      "question": "What is the default mode when opening a file with open(filename) in Python?",
      "options": {
        "A": "rb",
        "B": "w",
        "C": "a",
        "D": "r"
      },
      "correctAnswer": "D",
      "explanation": {
        "A": "'rb' opens file in binary read mode, not default.",
        "B": "'w' opens file for writing and overwrites it.",
        "C": "'a' opens file for appending.",
        "D": "'r' opens file for reading in text mode, which is the default. Always close files or use 'with' for best practice."
      },
      "topics": [
        "File Handling"
      ],
      "concepts": [
        "open",
        "file modes"
      ]
    },
    "question7": {
      "question": "What does the 'break' statement do in Python loops?",
      "options": {
        "A": "Skips the next iteration",
        "B": "Ends the loop immediately",
        "C": "Continues with the next iteration",
        "D": "Does nothing"
      },
      "correctAnswer": "B",
      "explanation": {
        "A": "break ends the entire loop, not just skipping iterations.",
        "B": "Correct: break terminates the loop and moves to the next statement after it.",
        "C": "continue skips to the next iteration without ending the loop.",
        "D": "break has an explicit loop control effect."
      },
      "topics": [
        "Control Statements",
        "Loops"
      ],
      "concepts": [
        "break",
        "Loop Control"
      ]
    },
    "question8": {
      "question": "How do you correctly declare a class Dog that inherits from a base class Animal in Python?",
      "options": {
        "A": "class Dog extends Animal:",
        "B": "class Dog inherits Animal:",
        "C": "class Dog(Animal):",
        "D": "class Dog[Animal]:"
      },
      "correctAnswer": "C",
      "explanation": {
        "A": "'extends' is not Python syntax (it's used in Java).",
        "B": "There is no 'inherits' keyword in Python.",
        "C": "Parentheses and class name specify inheritance: class SubClass(BaseClass):",
        "D": "Square brackets do not indicate inheritance in Python."
      },
      "topics": [
        "OOPs"
      ],
      "concepts": [
        "inheritance"
      ]
    },
    "question9": {
      "question": "When a Python object is created and initialized, which special method is called?",
      "options": {
        "A": "__del__",
        "B": "__init__",
        "C": "__new__",
        "D": "__start__"
      },
      "correctAnswer": "B",
      "explanation": {
        "A": "__del__ is called for destruction/finalization, not initialization.",
        "B": "__init__ initializes the object post-creation.",
        "C": "__new__ actually creates the object but is seldom overridden; initialization uses __init__.",
        "D": "__start__ is not a Python magic method."
      },
      "topics": [
        "OOPs"
      ],
      "concepts": [
        "constructor",
        "__init__"
      ]
    },
    "question10": {
      "question": "Which function from the os module will delete a file in Python?",
      "options": {
        "A": "os.remove()",
        "B": "os.delete()",
        "C": "os.del()",
        "D": "os.erase()"
      },
      "correctAnswer": "A",
      "explanation": {
        "A": "os.remove(filename) deletes the specified file.",
        "B": "os.delete() is not a valid method.",
        "C": "os.del() does not exist.",
        "D": "os.erase() is not a standard Python os method."
      },
      "topics": [
        "os",
        "File Handling"
      ],
      "concepts": [
        "os.remove",
        "file deletion"
      ]
    },
    "question11": {
      "question": "What is the output when the following code is executed?\nfor i in range(2, 7):\n    print(i)",
      "options": {
        "A": "2\n3\n4\n5\n6",
        "B": "2 3 4 5 6 7",
        "C": "3\n4\n5\n6\n7",
        "D": "2\n4\n6\n7"
      },
      "correctAnswer": "A",
      "explanation": {
        "A": "range(2,7) produces 2,3,4,5,6 (each number is printed on a new line).",
        "B": "range does not include 7; space-separated output is incorrect.",
        "C": "Starts from 3 is wrong, and prints up to 7 incorrectly.",
        "D": "range does not skip numbers in this case."
      },
      "topics": [
        "Loops"
      ],
      "concepts": [
        "range",
        "iteration"
      ]
    },
    "question12": {
      "question": "Which of these can be used to iterate over key-value pairs in a Python dictionary?",
      "options": {
        "A": "for k, v in dict.items()",
        "B": "for k, v in dict.values()",
        "C": "for k, v in dict.keys()",
        "D": "for k, v in dict.pairs()"
      },
      "correctAnswer": "A",
      "explanation": {
        "A": "Correct, dict.items() yields (key, value) tuples for unpacking.",
        "B": "dict.values() yields only values, not key-value pairs.",
        "C": "dict.keys() provides only the keys.",
        "D": "dict.pairs() is not a valid method."
      },
      "topics": [
        "Loops"
      ],
      "concepts": [
        "dictionary iteration",
        "items()"
      ]
    },
    "question13": {
      "question": "How do you open a text file for writing in Python so that any existing content is overwritten?",
      "options": {
        "A": "open('filename.txt', 'r')",
        "B": "open('filename.txt', 'w')",
        "C": "open('filename.txt', 'a')",
        "D": "open('filename.txt', 'x')"
      },
      "correctAnswer": "B",
      "explanation": {
        "A": "'r' mode opens for reading, not writing.",
        "B": "'w' mode overwrites the file. For best practice, use with open(...) as f: ... to handle file closing automatically.",
        "C": "'a' mode appends to the file and does not overwrite.",
        "D": "'x' creates a new file, but errors if the file already exists."
      },
      "topics": [
        "File Handling"
      ],
      "concepts": [
        "open",
        "file write mode"
      ]
    },
    "question14": {
      "question": "Which of the following keywords is used to define a function or method within a Python class?",
      "options": {
        "A": "function",
        "B": "def",
        "C": "lambda",
        "D": "func"
      },
      "correctAnswer": "B",
      "explanation": {
        "A": "'function' is not a Python keyword.",
        "B": "'def' is used to define functions and methods in Python.",
        "C": "'lambda' creates anonymous functions, not standard methods.",
        "D": "'func' is not a Python keyword."
      },
      "topics": [
        "OOPs"
      ],
      "concepts": [
        "class method",
        "def"
      ]
    },
    "question15": {
      "question": "What is the role of the 'pass' statement in Python?",
      "options": {
        "A": "Terminates the loop",
        "B": "Ignores an error",
        "C": "Does nothing; acts as a null statement",
        "D": "Skips the next statement"
      },
      "correctAnswer": "C",
      "explanation": {
        "A": "pass does not terminate loops.",
        "B": "pass does not handle errors.",
        "C": "pass is a no-operation statement, useful as a placeholder.",
        "D": "pass does not control flow in the way described."
      },
      "topics": [
        "Control Statements"
      ],
      "concepts": [
        "pass",
        "Null Operation"
      ]
    },
    "question16": {
      "question": "Which method is used to write a string to a file object in Python?",
      "options": {
        "A": "write()",
        "B": "print()",
        "C": "add()",
        "D": "append()"
      },
      "correctAnswer": "A",
      "explanation": {
        "A": "write() sends string data to the file object. Use with ...: for automatic closing and best practice.",
        "B": "print() outputs to stdout, unless file parameter is specified.",
        "C": "add() is not a standard file object method.",
        "D": "append() is for lists, not file objects."
      },
      "topics": [
        "File Handling"
      ],
      "concepts": [
        "write",
        "File Object Methods"
      ]
    },
    "question17": {
      "question": "How do you access the absolute pathname of the current working directory in Python using the os module?",
      "options": {
        "A": "os.listdir()",
        "B": "os.path()",
        "C": "os.getcwd()",
        "D": "os.curdir()"
      },
      "correctAnswer": "C",
      "explanation": {
        "A": "os.listdir() returns directory contents, not the current path.",
        "B": "os.path is a module, not a function.",
        "C": "os.getcwd() provides the absolute path of the working directory.",
        "D": "os.curdir gives symbolic representation ('.'), not a path."
      },
      "topics": [
        "os"
      ],
      "concepts": [
        "os.getcwd",
        "current working directory"
      ]
    },
    "question18": {
      "question": "Which compound statement is used for exception handling in Python?",
      "options": {
        "A": "try...except",
        "B": "catch...finally",
        "C": "handle...error",
        "D": "throw...catch"
      },
      "correctAnswer": "A",
      "explanation": {
        "A": "try...except is the correct Python construct for catching exceptions.",
        "B": "Python does have finally, but not catch; try...except...finally can be used.",
        "C": "There is no 'handle...error' statement.",
        "D": "'throw'/'catch' is not Python syntax."
      },
      "topics": [
        "Control Statements"
      ],
      "concepts": [
        "exception handling",
        "try-except"
      ]
    },
    "question19": {
      "question": "How do you create an object 'car' of the class Vehicle in Python?",
      "options": {
        "A": "car = Vehicle[]",
        "B": "car = Vehicle()",
        "C": "car = new Vehicle()",
        "D": "car = Vehicle.create()"
      },
      "correctAnswer": "B",
      "explanation": {
        "A": "Python uses parentheses for object instantiation, not brackets.",
        "B": "Object creation syntax: object = ClassName()",
        "C": "'new' is not used for instantiation in Python.",
        "D": "Vehicle.create() is not standard Python syntax for object creation."
      },
      "topics": [
        "OOPs"
      ],
      "concepts": [
        "object instantiation",
        "class"
      ]
    },
    "question20": {
      "question": "If 'sample.txt' contains 5 lines, what is the result of len(open('sample.txt').readlines()) in Python?",
      "options": {
        "A": "4",
        "B": "5",
        "C": "0",
        "D": "None"
      },
      "correctAnswer": "B",
      "explanation": {
        "A": "There would be 4 if one line was blank or missing; in this case, there are 5 lines.",
        "B": "readlines() returns a list of all lines; len() gives 5 for 5 lines. Using with open(...) as f: ... is preferred to avoid resource leaks.",
        "C": "If the file has lines, result is not 0.",
        "D": "None is not the result of len() on a list."
      },
      "topics": [
        "File Handling"
      ],
      "concepts": [
        "readlines",
        "len",
        "file content"
      ]
    }
  },
  ""
]