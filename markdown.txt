<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Corrected Markdown Rendering Logic</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- marked.js for Markdown to HTML conversion -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        /* * ANGULAR CSS FIX:
         * Your CSS file uses `::ng-deep`, which is deprecated. To apply these styles to the 
         * dynamically generated HTML from the <markdown> component, you should do two things:
         * 1. In your `hands-on-gen.component.ts`, set the component's encapsulation to None.
         * * import { ViewEncapsulation } from '@angular/core';
         *
         * @Component({
         * ...,
         * styleUrls: ['./hands-on-gen.component.css'],
         * encapsulation: ViewEncapsulation.None // <-- ADD THIS LINE
         * })
         *
         * 2. Remove all instances of `::ng-deep` from your CSS file. The styles will then apply correctly.
         * For example, `.markdown-container ::ng-deep h1` becomes `.markdown-container h1`.
        */
        .markdown-container h1,
        .markdown-container h2,
        .markdown-container h3,
        .markdown-container h4 {
            color: #1f2937;
            font-weight: 700;
            border-bottom: 1px solid #e5e7eb;
            padding-bottom: 0.5rem;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
        }

        .markdown-container h1 { font-size: 2.25rem; }
        .markdown-container h2 { font-size: 1.875rem; }
        .markdown-container h3 { font-size: 1.5rem; }
        .markdown-container h4 { font-size: 1.25rem; }

        .markdown-container p {
            margin-bottom: 1rem;
            line-height: 1.6;
        }

        .markdown-container ul,
        .markdown-container ol {
            margin-left: 1.5rem;
            margin-bottom: 1rem;
            list-style-position: outside;
        }
        .markdown-container ul { list-style-type: disc; }
        .markdown-container ol { list-style-type: decimal; }
        .markdown-container li { margin-bottom: 0.5rem; }

        .markdown-container table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1.5rem;
        }

        .markdown-container th,
        .markdown-container td {
            border: 1px solid #d1d5db;
            padding: 0.75rem;
            text-align: left;
        }

        .markdown-container th {
            background-color: #f3f4f6;
            font-weight: 600;
        }

        .markdown-container strong {
             color: #374151;
        }
        
        .markdown-container a {
            color: #2563eb;
            text-decoration: underline;
        }
        .markdown-container a:hover {
            color: #1d4ed8;
        }
    </style>
</head>
<body class="bg-slate-100">

    <div class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-slate-800">SRS Review</h1>
            <p class="text-slate-600 mt-2">This is how your rendered Markdown should appear.</p>
        </header>

        <!-- This simulates the output of your Angular component's RIGHT PANEL -->
        <div class="max-w-4xl mx-auto">
             <div class="bg-white p-6 rounded-lg border border-gray-200 shadow-soft">
                <div class="srs-section-header" style="background: linear-gradient(135deg, #1e40af 0%, #2563eb 100%); color: white; padding: 0.75rem 1rem; border-radius: 0.5rem 0.5rem 0 0; font-weight: 600; display: flex; align-items: center; gap: 0.5rem;">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    SRS Review
                </div>
                <!-- The dynamically rendered content will be placed inside this div -->
                <div id="preview" class="markdown-container">
                    <!-- Rendered HTML will appear here -->
                </div>
            </div>
        </div>
    </div>

    <script>
        /*
         * ===================================================================================
         * == THE MAIN FIX FOR YOUR ANGULAR APP ==
         * ===================================================================================
         * * The reason your component shows raw Markdown is that the `ngx-markdown` library 
         * has not been properly initialized for your entire application. The `<markdown>` 
         * component needs a service to function, and that service must be provided globally.
         * * Here, we are loading the `marked.js` script directly. This is the plain JS equivalent
         * of what `ngx-markdown` needs to do for you.
         *
         * SOLUTION:
         * In your main app configuration file (likely `app.config.ts` for standalone apps or 
         * `app.module.ts` for older module-based apps), you need to import and configure
         * the MarkdownModule using `.forRoot()`.
         *
         * Example for `app.config.ts` (Standalone):
         * ------------------------------------------
         * import { ApplicationConfig, importProvidersFrom } from '@angular/core';
         * import { MarkdownModule } from 'ngx-markdown';
         *
         * export const appConfig: ApplicationConfig = {
         * providers: [
         * // other providers...
         * importProvidersFrom(MarkdownModule.forRoot()), // <-- ADD THIS LINE
         * ]
         * };
         * * This one-time setup makes the markdown service available everywhere, and your
         * component will now correctly render the HTML.
         * ===================================================================================
        */

        const previewOutput = document.getElementById('preview');

        // This is the dynamic data you would get from your backend (srsReview.content.srs_md)
        const markdownFromBackend = `
# Software Requirements Specification (SRS)
## Project: Python Learning Platform â€“ Python Basics Module
---
## Table of Contents
- [Introduction](#introduction)
- [Stakeholder Summary](#stakeholder-summary)
- [Milestone/Feature Summary Table](#milestonefeature-summary-table)
---
## Stakeholder Summary
| Stakeholder | Role/Interest | Responsibilities/Concerns |
|---|---|---|
| Learners | End Users | Learning Python basics, tracking progress |
| Instructors/Admins | Content Creators/Moderators | Creating lessons/quizzes, managing forums |
`;

        // This function simulates the rendering process
        function renderMarkdown() {
            if (markdownFromBackend) {
                previewOutput.innerHTML = marked.parse(markdownFromBackend);
            }
        }

        // Render the content when the page loads
        renderMarkdown();

    </script>

</body>
</html>

